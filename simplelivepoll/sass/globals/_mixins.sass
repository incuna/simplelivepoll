// More info: https://github.com/perry/sass-font-face
@mixin font-face($style-name, $file, $family, $category)
    @font-face
        font-family: "#{$style-name}"
        $filepath: "../fonts/" + $family + "/" + $file
        src: url($filepath + ".eot")
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf")  format('truetype'), url($filepath + ".svg#" + $style-name + "") format('svg')

    %#{$style-name}
        font:
            family: "#{$style-name}", #{$category}
            weight: normal

// Documentation https://gist.github.com/3339249
@mixin pseudo($element: both)
    .lt-ie8 &
        @if $element == 'before'
            zoom: expression(this.runtimeStyle.zoom='1', this.insertBefore(document.createElement('span'), this.firstChild).className='before')
        @else if $element == 'after'
            zoom: expression(this.runtimeStyle.zoom='1', this.appendChild(document.createElement('span')).className='after')
        @else if $element == 'both'
            zoom: expression(this.runtimeStyle.zoom='1', this.insertBefore(document.createElement('span'), this.firstChild).className='before', this.appendChild(document.createElement('span')).className='after')

// IE friendly rgba backgrounds
// Usage: @include ie-rgba(rgba(0,0,0,0.5), 0.5)
//        @include ie-rgba(#FFF, 0.2)
// Notice opacity always has to be declared to the same as rgba alpha value
$number-to-hex-hexes: 0 1 2 3 4 5 6 7 8 9 A B C D E F
@function number-to-hex($number, $width: 2)
    $s: nth($number-to-hex-hexes, ($number % 16) + 1)
    @if $width > 1
        @return number-to-hex(floor($number / 16), $width - 1) + '#{$s}'
    @else
        @return '#{$s}'

@mixin ie-rgba($color, $opacity: 1)
    @if $opacity == 1
        background: rgba($color, 1)
    @else
        $color: rgba($color, $opacity)
        $a: number-to-hex(floor(opacity($color) * 255))
        $r: number-to-hex(red($color))
        $g: number-to-hex(green($color))
        $b: number-to-hex(blue($color))
        $argb: '#' + $a + $r + $g + $b
        background: rgba($color, $opacity)
        .lt-ie9 &
            background: none
            -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$argb},endColorstr=#{$argb})"
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$argb},endColorstr=#{$argb})
            zoom: 1
